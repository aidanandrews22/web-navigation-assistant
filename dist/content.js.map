{"version":3,"file":"content.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;;;;;;;;;AASA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://web-navigation-assistant/webpack/bootstrap","webpack://web-navigation-assistant/webpack/runtime/make namespace object","webpack://web-navigation-assistant/./src/content.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MessageRequest, MessageResponse, MouseAction } from './types';\n\n// Create and append the mouse pointer element\nconst mousePointer = document.createElement('div');\nmousePointer.style.cssText = `\n  position: fixed;\n  width: 32px;\n  height: 32px;\n  border-radius: 50% 50% 50% 0;\n  background-color: rgba(255, 0, 0, 0.85);\n  transform: rotate(-45deg) translate(-50%, -50%);\n  pointer-events: none;\n  z-index: 9999;\n  opacity: 0;\n  transition: transform 0.15s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.3s ease-in-out;\n  box-shadow: 0 0 10px 4px rgba(255, 0, 0, 0.5), 0 0 5px rgba(255, 0, 0, 1);\n`;\n\n// Create an inner element for better visibility\nconst pointerInner = document.createElement('div');\npointerInner.style.cssText = `\n  position: absolute;\n  top: 7px;\n  left: 7px;\n  width: 18px;\n  height: 18px;\n  background-color: white;\n  border-radius: 50% 50% 50% 0;\n  transform: scale(0.8);\n`;\nmousePointer.appendChild(pointerInner);\n\n// Create a trail element for motion blur effect\nconst cursorTrail = document.createElement('div');\ncursorTrail.style.cssText = `\n  position: fixed;\n  width: 32px;\n  height: 32px;\n  border-radius: 50% 50% 50% 0;\n  background-color: rgba(255, 0, 0, 0.3);\n  transform: rotate(-45deg) translate(-50%, -50%);\n  pointer-events: none;\n  z-index: 9998;\n  opacity: 0;\n  transition: transform 0.3s ease-out, opacity 0.5s ease-in-out;\n  filter: blur(5px);\n`;\ndocument.body.appendChild(cursorTrail);\ndocument.body.appendChild(mousePointer);\n\n// Create and append the instruction element\nconst instructionElement = document.createElement('div');\ninstructionElement.style.cssText = `\n  position: fixed;\n  bottom: 20px;\n  left: 20px;\n  max-width: 350px;\n  background-color: rgba(0, 0, 0, 0.85);\n  color: white;\n  padding: 15px 20px;\n  border-radius: 8px;\n  font-family: Arial, sans-serif;\n  font-size: 15px;\n  line-height: 1.5;\n  z-index: 9998;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);\n  transition: opacity 0.3s ease-in-out;\n  opacity: 0;\n  border-left: 5px solid #FF0000;\n`;\ndocument.body.appendChild(instructionElement);\n\n// Listen for messages from the background script\nchrome.runtime.onMessage.addListener((request: MessageRequest, sender, sendResponse: (response: MessageResponse) => void) => {\n  handleMessage(request, sender, sendResponse);\n  return true; // Required to use sendResponse asynchronously\n});\n\nasync function handleMessage(\n  request: MessageRequest, \n  sender: chrome.runtime.MessageSender, \n  sendResponse: (response: MessageResponse) => void\n) {\n  try {\n    switch (request.action) {\n      case 'moveMouse':\n        const mouseAction = request.data as MouseAction;\n        await animateMouse(mouseAction);\n        sendResponse({ success: true });\n        break;\n        \n      case 'showInstructions':\n        showInstructions(request.data);\n        sendResponse({ success: true });\n        break;\n        \n      default:\n        sendResponse({ success: false, error: 'Unknown action' });\n    }\n  } catch (error) {\n    console.error('Error in content script:', error);\n    sendResponse({ \n      success: false, \n      error: error instanceof Error ? error.message : 'Unknown error' \n    });\n  }\n}\n\nfunction showInstructions(text: string) {\n  instructionElement.innerHTML = text;\n  instructionElement.style.opacity = '1';\n  \n  // Hide instructions after 20 seconds to give user more time to read\n  setTimeout(() => {\n    instructionElement.style.opacity = '0';\n  }, 20000);\n}\n\nlet lastPositions: {x: number, y: number}[] = [];\n\nasync function animateMouse(action: MouseAction): Promise<void> {\n  return new Promise((resolve) => {\n    // Calculate actual pixel position based on percentages\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    \n    const xPos = (action.x / 100) * viewportWidth;\n    const yPos = (action.y / 100) * viewportHeight;\n    \n    // Store position for trail effect\n    lastPositions.push({x: xPos, y: yPos});\n    if (lastPositions.length > 5) {\n      lastPositions.shift();\n    }\n    \n    // Show the mouse pointer\n    mousePointer.style.opacity = '1';\n    \n    // Move the mouse pointer\n    mousePointer.style.transform = `rotate(-45deg) translate(${xPos}px, ${yPos}px)`;\n    \n    // Show trail with slight delay for motion blur effect\n    setTimeout(() => {\n      if (lastPositions.length > 1) {\n        const prevPos = lastPositions[lastPositions.length - 2];\n        cursorTrail.style.opacity = '1';\n        cursorTrail.style.transform = `rotate(-45deg) translate(${prevPos.x}px, ${prevPos.y}px)`;\n        \n        setTimeout(() => {\n          cursorTrail.style.opacity = '0';\n        }, 200);\n      }\n    }, 50);\n    \n    // If there's a target element description, show it as instructions\n    if (action.targetElement) {\n      showInstructions(`\n        <div style=\"font-weight: bold; margin-bottom: 8px; color: #FF6666;\">\n          ${action.action === 'move' ? 'Move to' : 'Click on'}:\n        </div>\n        <div>${action.targetElement}</div>\n      `);\n    }\n    \n    // Add a pulsating effect to make it more noticeable\n    const pulseAnimation = setInterval(() => {\n      mousePointer.style.boxShadow = '0 0 20px 5px rgba(255, 0, 0, 0.8), 0 0 10px rgba(255, 0, 0, 1)';\n      setTimeout(() => {\n        mousePointer.style.boxShadow = '0 0 10px 4px rgba(255, 0, 0, 0.5), 0 0 5px rgba(255, 0, 0, 1)';\n      }, 500);\n    }, 1000);\n    \n    // Simulate click or double-click if needed\n    if (action.action === 'click' || action.action === 'dblclick') {\n      setTimeout(() => {\n        // Add a temporary click animation\n        mousePointer.style.transform = `rotate(-45deg) translate(${xPos}px, ${yPos}px) scale(0.8)`;\n        \n        setTimeout(() => {\n          mousePointer.style.transform = `rotate(-45deg) translate(${xPos}px, ${yPos}px) scale(1)`;\n          \n          if (action.action === 'dblclick') {\n            // For double-click, repeat the animation\n            setTimeout(() => {\n              mousePointer.style.transform = `rotate(-45deg) translate(${xPos}px, ${yPos}px) scale(0.8)`;\n              \n              setTimeout(() => {\n                mousePointer.style.transform = `rotate(-45deg) translate(${xPos}px, ${yPos}px) scale(1)`;\n                \n                // Hide the pointer after completing animation\n                setTimeout(() => {\n                  mousePointer.style.opacity = '0';\n                  cursorTrail.style.opacity = '0';\n                  clearInterval(pulseAnimation);\n                  resolve();\n                }, 2000);\n              }, 100);\n            }, 200);\n          } else {\n            // For single click, hide after animation completes\n            setTimeout(() => {\n              mousePointer.style.opacity = '0';\n              cursorTrail.style.opacity = '0';\n              clearInterval(pulseAnimation);\n              resolve();\n            }, 2000);\n          }\n        }, 100);\n      }, 500);\n    } else {\n      // For just movement or hover, hide after a delay\n      setTimeout(() => {\n        mousePointer.style.opacity = '0';\n        cursorTrail.style.opacity = '0';\n        clearInterval(pulseAnimation);\n        resolve();\n      }, 3000);\n    }\n  });\n} "],"names":[],"sourceRoot":""}