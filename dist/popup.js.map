{"version":3,"file":"popup.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://web-navigation-assistant/webpack/bootstrap","webpack://web-navigation-assistant/webpack/runtime/make namespace object","webpack://web-navigation-assistant/./src/popup.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MessageRequest, MessageResponse } from './types';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const analyzeBtn = document.getElementById('analyzeBtn') as HTMLButtonElement;\n  const askQuestionBtn = document.getElementById('askQuestionBtn') as HTMLButtonElement;\n  const saveApiKeyBtn = document.getElementById('saveApiKey') as HTMLButtonElement;\n  const apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;\n  const userPromptInput = document.getElementById('userPrompt') as HTMLTextAreaElement;\n  const userQuestionInput = document.getElementById('userQuestion') as HTMLTextAreaElement;\n  const statusElement = document.getElementById('status') as HTMLDivElement;\n  const instructionsElement = document.getElementById('instructions') as HTMLDivElement;\n  \n  // Tab switching\n  const tabs = document.querySelectorAll('.tab');\n  const tabContents = document.querySelectorAll('.tab-content');\n  \n  tabs.forEach(tab => {\n    tab.addEventListener('click', () => {\n      // Remove active class from all tabs and contents\n      tabs.forEach(t => t.classList.remove('active'));\n      tabContents.forEach(c => c.classList.remove('active'));\n      \n      // Add active class to clicked tab\n      tab.classList.add('active');\n      \n      // Show corresponding content\n      const tabName = (tab as HTMLElement).dataset.tab;\n      const content = tabName === 'navigation' \n        ? document.getElementById('navigationTab') \n        : document.getElementById('qaTab');\n      \n      if (content) {\n        content.classList.add('active');\n      }\n    });\n  });\n\n  // Load saved API key if available\n  try {\n    const response = await sendMessage({ action: 'getApiKey' });\n    if (response.success && response.data) {\n      apiKeyInput.value = response.data;\n    }\n  } catch (error) {\n    console.error('Error loading API key:', error);\n  }\n\n  // Save API key\n  saveApiKeyBtn.addEventListener('click', async () => {\n    const apiKey = apiKeyInput.value.trim();\n    if (!apiKey) {\n      showStatus('Please enter a valid API key');\n      return;\n    }\n\n    try {\n      const response = await sendMessage({ \n        action: 'saveApiKey', \n        data: apiKey \n      });\n      \n      if (response.success) {\n        showStatus('API key saved successfully');\n      } else {\n        showStatus(`Error: ${response.error || 'Failed to save API key'}`);\n      }\n    } catch (error) {\n      showStatus('Error saving API key');\n      console.error(error);\n    }\n  });\n\n  // Analyze current page for navigation help\n  analyzeBtn.addEventListener('click', async () => {\n    const userPrompt = userPromptInput.value.trim();\n    \n    if (!userPrompt) {\n      showStatus('Please enter what you need help with');\n      return;\n    }\n    \n    analyzeBtn.disabled = true;\n    showStatus('Capturing screenshot...');\n\n    try {\n      // First, capture the screenshot\n      const captureResponse = await sendMessage({ action: 'captureScreenshot' });\n      \n      if (!captureResponse.success) {\n        throw new Error(captureResponse.error || 'Failed to capture screenshot');\n      }\n      \n      showStatus('Analyzing with AI...');\n      \n      // Then, analyze the screenshot with user prompt\n      const analyzeResponse = await sendMessage({ \n        action: 'analyzeScreenshot', \n        data: {\n          screenshot: captureResponse.data,\n          userPrompt: userPrompt,\n          mode: 'navigation'\n        }\n      });\n      \n      if (!analyzeResponse.success) {\n        throw new Error(analyzeResponse.error || 'Failed to analyze screenshot');\n      }\n      \n      // Display instructions\n      const aiResponse = analyzeResponse.data;\n      instructionsElement.textContent = aiResponse.instructions;\n      showStatus('Analysis complete');\n      \n    } catch (error) {\n      console.error('Error during analysis:', error);\n      showStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      analyzeBtn.disabled = false;\n    }\n  });\n  \n  // Ask general question about the page\n  askQuestionBtn.addEventListener('click', async () => {\n    const question = userQuestionInput.value.trim();\n    \n    if (!question) {\n      showStatus('Please enter a question');\n      return;\n    }\n    \n    askQuestionBtn.disabled = true;\n    showStatus('Capturing screenshot...');\n\n    try {\n      // First, capture the screenshot\n      const captureResponse = await sendMessage({ action: 'captureScreenshot' });\n      \n      if (!captureResponse.success) {\n        throw new Error(captureResponse.error || 'Failed to capture screenshot');\n      }\n      \n      showStatus('Analyzing with AI...');\n      \n      // Then, analyze the screenshot with user question\n      const analyzeResponse = await sendMessage({ \n        action: 'analyzeScreenshot', \n        data: {\n          screenshot: captureResponse.data,\n          userPrompt: question,\n          mode: 'qa'\n        }\n      });\n      \n      if (!analyzeResponse.success) {\n        throw new Error(analyzeResponse.error || 'Failed to analyze screenshot');\n      }\n      \n      // Display answer\n      const aiResponse = analyzeResponse.data;\n      instructionsElement.textContent = aiResponse.instructions;\n      showStatus('Question answered');\n      \n    } catch (error) {\n      console.error('Error getting answer:', error);\n      showStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      askQuestionBtn.disabled = false;\n    }\n  });\n\n  function showStatus(message: string) {\n    statusElement.textContent = message;\n  }\n\n  function sendMessage(message: MessageRequest): Promise<MessageResponse> {\n    return new Promise((resolve) => {\n      chrome.runtime.sendMessage(message, (response: MessageResponse) => {\n        resolve(response);\n      });\n    });\n  }\n}); "],"names":[],"sourceRoot":""}